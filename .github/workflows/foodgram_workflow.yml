name: CI и CD проекта Foodgram

on: [push]

jobs:

  tests:
    name: Flake8-Test
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version:  '3.10'

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r backend/requirements.txt 

    - name: Test with flake8
      run: |
        echo '[flake8]' > setup.cfg
        echo 'ignore =' >> setup.cfg
        echo '    W503' >> setup.cfg
        echo '    I001' >> setup.cfg
        echo '    I004' >> setup.cfg
        echo '    I005' >> setup.cfg
        echo '    R504' >> setup.cfg
        echo '    R505' >> setup.cfg
        echo '    F811' >> setup.cfg
        echo 'exclude =' >> setup.cfg
        echo '    tests/,' >> setup.cfg
        echo '    */migrations/,' >> setup.cfg
        echo '    venv/,' >> setup.cfg
        echo '    env/' >> setup.cfg
        echo 'per-file-ignores =' >> setup.cfg
        echo '    */settings.py:E501' >> setup.cfg
        echo 'max-complexity = 10' >> setup.cfg
        python -m flake8 backend

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0
 
      - name: Login to Docker 
        uses: docker/login-action@v2 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub Backend
        uses: docker/build-push-action@v4.0.0
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      - name: Push to Docker Hub Frontend
        uses: docker/build-push-action@v4.0.0
        with:
          push: true
          context: frontend/
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  deploy:
    name: Deploy to remote server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose down
            cd ${{ secrets.PROJECT_FOLDER }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            cd infra/
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d --build

  send_message:
    name: Message to telegram
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: | 
          ${{ github.workflow }} успешно выполнен!
          https://github.com/${{ github.repository }}/commit/${{github.sha}}
          ${{ github.actor }} - запушил!
          Статус ${{ github.action_status }}
