name: CI и CD проекта Foodgram

on: [push]

jobs:
  # copy_infra_to_server:
  #   name: Copy-infra
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v2

  #   - uses: garygrossgarten/github-action-scp@release
  #     with:
  #         local: infra/
  #         remote: /${{ secrets.USERNAME }}/foodgram-project-react/
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }}

  # tests:
  #   name: Flake8-Test
  #   runs-on: ubuntu-latest
  
  #   steps:
  #   - uses: actions/checkout@v2

  #   - uses: actions/setup-python@v2
  #     with:
  #       python-version:  '3.10'

  #   - name: Install dependencies
  #     run: | 
  #       python -m pip install --upgrade pip 
  #       pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
  #       pip install -r backend/requirements.txt 

  #   - name: Test with flake8
  #     run: |
  #       echo '[flake8]' > setup.cfg
  #       echo 'ignore =' >> setup.cfg
  #       echo '    W503' >> setup.cfg
  #       echo '    I001' >> setup.cfg
  #       echo '    I004' >> setup.cfg
  #       echo '    I005' >> setup.cfg
  #       echo '    R504' >> setup.cfg
  #       echo '    R505' >> setup.cfg
  #       echo '    F811' >> setup.cfg
  #       echo 'exclude =' >> setup.cfg
  #       echo '    tests/,' >> setup.cfg
  #       echo '    */migrations/,' >> setup.cfg
  #       echo '    venv/,' >> setup.cfg
  #       echo '    env/' >> setup.cfg
  #       echo 'per-file-ignores =' >> setup.cfg
  #       echo '    */settings.py:E501' >> setup.cfg
  #       echo 'max-complexity = 10' >> setup.cfg
  #       python -m flake8 

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    # needs: tests
    steps:
    - name: Check out the repo
      uses: actions/checkout@v3 

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.5.0

    - name: Login to Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push backend 
      uses: docker/build-push-action@v4.0.0
      with:
        context: ./backend/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

    - name: Push frontend
      uses: docker/build-push-action@v4.0.0
      with:
        context: ./frontend/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  deploy:
    name: Deploy to remote server
    runs-on: ubuntu-latest
    needs: 
    - build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ secrets.PROJECT_FOLDER }}
            sudo rm -f .env
            sudo touch .env

            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
         
            sudo docker-compose stop
            sudo docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs sudo docker rm
            
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/frontend
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/backend
            sudo docker-compose up -d 
            sudo docker image prune -a

  send_message:
    name: Message to telegram
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: | 
          ${{ github.workflow }} успешно выполнен!
          https://github.com/${{ github.repository }}/commit/${{github.sha}}
          ${{ github.actor }} - запушил!
